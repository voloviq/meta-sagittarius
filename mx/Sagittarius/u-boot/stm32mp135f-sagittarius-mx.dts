/* SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause) */
/*
 * Copyright (C) STMicroelectronics 2023 - All Rights Reserved
 * Author: STM32CubeMX code generation for STMicroelectronics.
 */

/* For more information on Device Tree configuration, please refer to
 * https://wiki.st.com/stm32mpu/wiki/Category:Device_tree_configuration
 */

/dts-v1/;
#include <dt-bindings/pinctrl/stm32-pinfunc.h>

#include "stm32mp135.dtsi"
#include "stm32mp13xf.dtsi"

/* USER CODE BEGIN includes */
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/input/input.h>
#include <dt-bindings/leds/common.h>
/* USER CODE END includes */

/ {
	model = "STMicroelectronics custom STM32CubeMX board - openstlinux-5.15-yocto-kirkstone-mp1-v22.11.23";
	compatible = "st,stm32mp135f-sagittarius-mx", "st,stm32mp135";

	memory@c0000000 {
		device_type = "memory";
		reg = <0xc0000000 0x20000000>;

		/* USER CODE BEGIN memory */
		/* USER CODE END memory */
	};

	reserved-memory {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		/* USER CODE BEGIN reserved-memory */
		optee_framebuffer@dd000000 {
			reg = <0xdd000000 0x1000000>;
			no-map;
		};

		optee@de000000 {
			reg = <0xde000000 0x2000000>;
			no-map;
		};
		/* USER CODE END reserved-memory */
	};

	/* USER CODE BEGIN root */
	aliases {
		serial0 = &uart4;
		serial1 = &uart5;
		serial2 = &uart7;
		serial3 = &usart1;
		serial4 = &usart6;
		ethernet0 = &eth1;
		ethernet1 = &eth2;
	};
	
	chosen {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;
		stdout-path = "serial0:115200n8";

		framebuffer {
			compatible = "simple-framebuffer";
			clocks = <&rcc LTDC_PX>;
			status = "disabled";
		};
	};

	led{
		compatible = "gpio-leds";

		led_blue{
			label = "LED_BLUE";
			gpios = <&gpioh 4 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "heartbeat";
			status = "okay";
			default-state = "off";
		};

		led_red{
			label = "LED_RED";
			gpios = <&gpioi 7 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "cpu0";
			status = "okay";
			default-state = "off";
		};

		led_yellow{
			label = "LED_YELLOW";
			gpios = <&gpioh 5 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "mmc0";
			status = "okay";
			default-state = "off";
		};

		led_green{
			label = "LED_GREEN";
			gpios = <&gpiof 14 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "mmc1";
			status = "okay";
			default-state = "off";
		};
	};
	
	vin: vin {
		compatible = "regulator-fixed";
		regulator-name = "vin";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		regulator-always-on;
	};

	v3v3_ao: v3v3_ao {
		compatible = "regulator-fixed";
		regulator-name = "v3v3_ao";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-always-on;
	};
	
	vmmc: fixedregulator@1 {
		compatible = "regulator-fixed";
		regulator-name = "vmmc";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		startup-delay-us = <70000>;
		enable-active-high;
	};

	usb_phy_tuning:usb-phy-tuning{
		st,hs-dc-level = <2>;
		st,fs-rftime-tuning;
		st,hs-rftime-reduction;
		st,hs-current-trim = <15>;
		st,hs-impedance-trim = <1>;
		st,squelch-level = <3>;
		st,hs-rx-offset = <2>;
		st,no-lsfs-sc;
	};

	panel_backlight: panel-backlight {
		compatible = "gpio-backlight";
		gpios = <&gpioa 10 GPIO_ACTIVE_HIGH>;
		default-on;
		default-brightness-level = <0>;
		status = "okay";
	};

	panel_rgb: panel-rgb {
		compatible = "rocktech,rk043fn48h", "panel-dpi";
		enable-gpios = <&gpioa 13 GPIO_ACTIVE_HIGH>;
		backlight = <&panel_backlight>;
		power-supply = <&v3v3_ao>;
		data-mapping = "bgr888";
		status = "okay";

		width-mm = <56>;
		height-mm = <97>;

		port {
			panel_in_rgb: endpoint {
				remote-endpoint = <&ltdc_out_rgb>;
			};
		};

		panel-timing {
			clock-frequency = <33260000>;
			hactive = <800>;
			vactive = <480>;
			hback-porch = <0>;
			hfront-porch = <256>;
			vback-porch = <0>;
			vfront-porch = <45>;
			hsync-len = <1>;
			vsync-len = <1>;
			hsync-active = <0>;
			vsync-active = <0>;
			de-active = <1>;
			pixelclk-active = <1>;
		};
	};
	/* USER CODE END root */

	clocks {

		/* USER CODE BEGIN clocks */
		/* USER CODE END clocks */
	};

}; /*root*/

&pinctrl {

	adc1_pins_mx: adc1_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 1, ANALOG)>, /* ADC1_INP3 */
					 <STM32_PINMUX('A', 4, ANALOG)>, /* ADC1_INP14 */
					 <STM32_PINMUX('A', 5, ANALOG)>, /* ADC1_INP2 */
					 <STM32_PINMUX('C', 0, ANALOG)>, /* ADC1_INP0 */
					 <STM32_PINMUX('C', 3, ANALOG)>, /* ADC1_INP13 */
					 <STM32_PINMUX('F', 11, ANALOG)>, /* ADC1_INP8 */
					 <STM32_PINMUX('F', 12, ANALOG)>; /* ADC1_INP6 */
		};
	};

	adc1_sleep_pins_mx: adc1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 1, ANALOG)>, /* ADC1_INP3 */
					 <STM32_PINMUX('A', 4, ANALOG)>, /* ADC1_INP14 */
					 <STM32_PINMUX('A', 5, ANALOG)>, /* ADC1_INP2 */
					 <STM32_PINMUX('C', 0, ANALOG)>, /* ADC1_INP0 */
					 <STM32_PINMUX('C', 3, ANALOG)>, /* ADC1_INP13 */
					 <STM32_PINMUX('F', 11, ANALOG)>, /* ADC1_INP8 */
					 <STM32_PINMUX('F', 12, ANALOG)>; /* ADC1_INP6 */
		};
	};

	eth1_pins_mx: eth1_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 11, AF11)>, /* ETH1_CLK */
					 <STM32_PINMUX('B', 11, AF11)>, /* ETH1_TX_EN */
					 <STM32_PINMUX('G', 2, AF11)>, /* ETH1_MDC */
					 <STM32_PINMUX('G', 13, AF11)>, /* ETH1_TXD0 */
					 <STM32_PINMUX('G', 14, AF11)>; /* ETH1_TXD1 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('A', 2, AF11)>; /* ETH1_MDIO */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('C', 1, AF10)>, /* ETH1_CRS_DV */
					 <STM32_PINMUX('C', 4, AF11)>, /* ETH1_RXD0 */
					 <STM32_PINMUX('C', 5, AF11)>, /* ETH1_RXD1 */
					 <STM32_PINMUX('H', 6, AF10)>; /* ETH1_PHY_INTN */
			bias-disable;
		};
	};

	eth1_sleep_pins_mx: eth1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 2, ANALOG)>, /* ETH1_MDIO */
					 <STM32_PINMUX('A', 11, ANALOG)>, /* ETH1_CLK */
					 <STM32_PINMUX('B', 11, ANALOG)>, /* ETH1_TX_EN */
					 <STM32_PINMUX('C', 1, ANALOG)>, /* ETH1_CRS_DV */
					 <STM32_PINMUX('C', 4, ANALOG)>, /* ETH1_RXD0 */
					 <STM32_PINMUX('C', 5, ANALOG)>, /* ETH1_RXD1 */
					 <STM32_PINMUX('G', 2, ANALOG)>, /* ETH1_MDC */
					 <STM32_PINMUX('G', 13, ANALOG)>, /* ETH1_TXD0 */
					 <STM32_PINMUX('G', 14, ANALOG)>, /* ETH1_TXD1 */
					 <STM32_PINMUX('H', 6, ANALOG)>; /* ETH1_PHY_INTN */
		};
	};

	eth2_pins_mx: eth2_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 12, AF11)>, /* ETH2_CRS_DV */
					 <STM32_PINMUX('E', 2, AF10)>, /* ETH2_RXD1 */
					 <STM32_PINMUX('F', 4, AF11)>, /* ETH2_RXD0 */
					 <STM32_PINMUX('G', 12, AF10)>; /* ETH2_PHY_INTN */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('B', 2, AF11)>; /* ETH2_MDIO */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('F', 6, AF11)>, /* ETH2_TX_EN */
					 <STM32_PINMUX('F', 7, AF11)>, /* ETH2_TXD0 */
					 <STM32_PINMUX('G', 5, AF10)>, /* ETH2_MDC */
					 <STM32_PINMUX('G', 8, AF13)>, /* ETH2_CLK */
					 <STM32_PINMUX('G', 11, AF10)>; /* ETH2_TXD1 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	eth2_sleep_pins_mx: eth2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 12, ANALOG)>, /* ETH2_CRS_DV */
					 <STM32_PINMUX('B', 2, ANALOG)>, /* ETH2_MDIO */
					 <STM32_PINMUX('E', 2, ANALOG)>, /* ETH2_RXD1 */
					 <STM32_PINMUX('F', 4, ANALOG)>, /* ETH2_RXD0 */
					 <STM32_PINMUX('F', 6, ANALOG)>, /* ETH2_TX_EN */
					 <STM32_PINMUX('F', 7, ANALOG)>, /* ETH2_TXD0 */
					 <STM32_PINMUX('G', 5, ANALOG)>, /* ETH2_MDC */
					 <STM32_PINMUX('G', 8, ANALOG)>, /* ETH2_CLK */
					 <STM32_PINMUX('G', 11, ANALOG)>, /* ETH2_TXD1 */
					 <STM32_PINMUX('G', 12, ANALOG)>; /* ETH2_PHY_INTN */
		};
	};

	fdcan1_pins_mx: fdcan1_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('D', 0, AF9)>; /* FDCAN1_RX */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('G', 10, AF9)>; /* FDCAN1_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	fdcan1_sleep_pins_mx: fdcan1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 0, ANALOG)>, /* FDCAN1_RX */
					 <STM32_PINMUX('G', 10, ANALOG)>; /* FDCAN1_TX */
		};
	};

	fdcan2_pins_mx: fdcan2_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('E', 0, AF9)>; /* FDCAN2_RX */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('G', 1, AF9)>; /* FDCAN2_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	fdcan2_sleep_pins_mx: fdcan2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('E', 0, ANALOG)>, /* FDCAN2_RX */
					 <STM32_PINMUX('G', 1, ANALOG)>; /* FDCAN2_TX */
		};
	};

	i2c1_pins_mx: i2c1_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 3, AF5)>, /* I2C1_SDA */
					 <STM32_PINMUX('D', 12, AF5)>; /* I2C1_SCL */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c1_sleep_pins_mx: i2c1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 3, ANALOG)>, /* I2C1_SDA */
					 <STM32_PINMUX('D', 12, ANALOG)>; /* I2C1_SCL */
		};
	};

	i2c2_pins_mx: i2c2_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 7, AF4)>, /* I2C2_SCL */
					 <STM32_PINMUX('G', 3, AF4)>; /* I2C2_SDA */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c2_sleep_pins_mx: i2c2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 7, ANALOG)>, /* I2C2_SCL */
					 <STM32_PINMUX('G', 3, ANALOG)>; /* I2C2_SDA */
		};
	};

	i2c3_pins_mx: i2c3_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('H', 12, AF4)>, /* I2C3_SCL */
					 <STM32_PINMUX('H', 14, AF4)>; /* I2C3_SDA */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c3_sleep_pins_mx: i2c3_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('H', 12, ANALOG)>, /* I2C3_SCL */
					 <STM32_PINMUX('H', 14, ANALOG)>; /* I2C3_SDA */
		};
	};

	ltdc_pins_mx: ltdc_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 15, AF9)>, /* LTDC_R0 */
					 <STM32_PINMUX('B', 6, AF7)>, /* LTDC_B6 */
					 <STM32_PINMUX('B', 12, AF13)>, /* LTDC_R3 */
					 <STM32_PINMUX('D', 1, AF14)>, /* LTDC_G2 */
					 <STM32_PINMUX('D', 4, AF11)>, /* LTDC_R1 */
					 <STM32_PINMUX('D', 5, AF14)>, /* LTDC_G4 */
					 <STM32_PINMUX('D', 9, AF14)>, /* LTDC_B0 */
					 <STM32_PINMUX('D', 10, AF11)>, /* LTDC_B7 */
					 <STM32_PINMUX('D', 14, AF14)>, /* LTDC_R4 */
					 <STM32_PINMUX('D', 15, AF14)>, /* LTDC_B5 */
					 <STM32_PINMUX('E', 1, AF9)>, /* LTDC_HSYNC */
					 <STM32_PINMUX('E', 4, AF14)>, /* LTDC_G7 */
					 <STM32_PINMUX('E', 6, AF14)>, /* LTDC_G3 */
					 <STM32_PINMUX('E', 7, AF14)>, /* LTDC_R5 */
					 <STM32_PINMUX('E', 9, AF14)>, /* LTDC_R7 */
					 <STM32_PINMUX('E', 13, AF11)>, /* LTDC_B1 */
					 <STM32_PINMUX('F', 2, AF14)>, /* LTDC_B3 */
					 <STM32_PINMUX('F', 5, AF9)>, /* LTDC_G0 */
					 <STM32_PINMUX('G', 0, AF14)>, /* LTDC_G5 */
					 <STM32_PINMUX('G', 4, AF11)>, /* LTDC_VSYNC */
					 <STM32_PINMUX('G', 15, AF11)>, /* LTDC_B4 */
					 <STM32_PINMUX('H', 2, AF7)>, /* LTDC_G1 */
					 <STM32_PINMUX('H', 7, AF14)>, /* LTDC_B2 */
					 <STM32_PINMUX('H', 8, AF11)>, /* LTDC_R6 */
					 <STM32_PINMUX('H', 9, AF11)>, /* LTDC_DE */
					 <STM32_PINMUX('H', 10, AF14)>, /* LTDC_R2 */
					 <STM32_PINMUX('H', 11, AF14)>; /* LTDC_G6 */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('B', 13, AF13)>; /* LTDC_CLK */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	ltdc_sleep_pins_mx: ltdc_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 15, ANALOG)>, /* LTDC_R0 */
					 <STM32_PINMUX('B', 6, ANALOG)>, /* LTDC_B6 */
					 <STM32_PINMUX('B', 12, ANALOG)>, /* LTDC_R3 */
					 <STM32_PINMUX('B', 13, ANALOG)>, /* LTDC_CLK */
					 <STM32_PINMUX('D', 1, ANALOG)>, /* LTDC_G2 */
					 <STM32_PINMUX('D', 4, ANALOG)>, /* LTDC_R1 */
					 <STM32_PINMUX('D', 5, ANALOG)>, /* LTDC_G4 */
					 <STM32_PINMUX('D', 9, ANALOG)>, /* LTDC_B0 */
					 <STM32_PINMUX('D', 10, ANALOG)>, /* LTDC_B7 */
					 <STM32_PINMUX('D', 14, ANALOG)>, /* LTDC_R4 */
					 <STM32_PINMUX('D', 15, ANALOG)>, /* LTDC_B5 */
					 <STM32_PINMUX('E', 1, ANALOG)>, /* LTDC_HSYNC */
					 <STM32_PINMUX('E', 4, ANALOG)>, /* LTDC_G7 */
					 <STM32_PINMUX('E', 6, ANALOG)>, /* LTDC_G3 */
					 <STM32_PINMUX('E', 7, ANALOG)>, /* LTDC_R5 */
					 <STM32_PINMUX('E', 9, ANALOG)>, /* LTDC_R7 */
					 <STM32_PINMUX('E', 13, ANALOG)>, /* LTDC_B1 */
					 <STM32_PINMUX('F', 2, ANALOG)>, /* LTDC_B3 */
					 <STM32_PINMUX('F', 5, ANALOG)>, /* LTDC_G0 */
					 <STM32_PINMUX('G', 0, ANALOG)>, /* LTDC_G5 */
					 <STM32_PINMUX('G', 4, ANALOG)>, /* LTDC_VSYNC */
					 <STM32_PINMUX('G', 15, ANALOG)>, /* LTDC_B4 */
					 <STM32_PINMUX('H', 2, ANALOG)>, /* LTDC_G1 */
					 <STM32_PINMUX('H', 7, ANALOG)>, /* LTDC_B2 */
					 <STM32_PINMUX('H', 8, ANALOG)>, /* LTDC_R6 */
					 <STM32_PINMUX('H', 9, ANALOG)>, /* LTDC_DE */
					 <STM32_PINMUX('H', 10, ANALOG)>, /* LTDC_R2 */
					 <STM32_PINMUX('H', 11, ANALOG)>; /* LTDC_G6 */
		};
	};

	quadspi_pins_mx: quadspi_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('D', 11, AF9)>, /* QUADSPI_BK1_IO2 */
					 <STM32_PINMUX('D', 13, AF9)>, /* QUADSPI_BK1_IO3 */
					 <STM32_PINMUX('E', 14, AF9)>, /* QUADSPI_BK1_NCS */
					 <STM32_PINMUX('F', 9, AF10)>, /* QUADSPI_BK1_IO1 */
					 <STM32_PINMUX('H', 3, AF13)>; /* QUADSPI_BK1_IO0 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('F', 10, AF9)>; /* QUADSPI_CLK */
			bias-disable;
			drive-push-pull;
			slew-rate = <2>;
		};
	};

	quadspi_sleep_pins_mx: quadspi_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 11, ANALOG)>, /* QUADSPI_BK1_IO2 */
					 <STM32_PINMUX('D', 13, ANALOG)>, /* QUADSPI_BK1_IO3 */
					 <STM32_PINMUX('E', 14, ANALOG)>, /* QUADSPI_BK1_NCS */
					 <STM32_PINMUX('F', 9, ANALOG)>, /* QUADSPI_BK1_IO1 */
					 <STM32_PINMUX('F', 10, ANALOG)>, /* QUADSPI_CLK */
					 <STM32_PINMUX('H', 3, ANALOG)>; /* QUADSPI_BK1_IO0 */
		};
	};

	sdmmc1_pins_mx: sdmmc1_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
					 <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
					 <STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
					 <STM32_PINMUX('C', 11, AF12)>, /* SDMMC1_D3 */
					 <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
	};

	sdmmc1_opendrain_pins_mx: sdmmc1_opendrain_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
					 <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
					 <STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
					 <STM32_PINMUX('C', 11, AF12)>; /* SDMMC1_D3 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
			bias-disable;
			drive-open-drain;
			slew-rate = <1>;
		};
	};

	sdmmc1_sleep_pins_mx: sdmmc1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('C', 8, ANALOG)>, /* SDMMC1_D0 */
					 <STM32_PINMUX('C', 9, ANALOG)>, /* SDMMC1_D1 */
					 <STM32_PINMUX('C', 10, ANALOG)>, /* SDMMC1_D2 */
					 <STM32_PINMUX('C', 11, ANALOG)>, /* SDMMC1_D3 */
					 <STM32_PINMUX('C', 12, ANALOG)>, /* SDMMC1_CK */
					 <STM32_PINMUX('D', 2, ANALOG)>; /* SDMMC1_CMD */
		};
	};

	sdmmc2_pins_mx: sdmmc2_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('B', 3, AF10)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('B', 4, AF10)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('B', 9, AF10)>, /* SDMMC2_D5 */
					 <STM32_PINMUX('B', 14, AF10)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('B', 15, AF10)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('C', 6, AF10)>, /* SDMMC2_D6 */
					 <STM32_PINMUX('C', 7, AF10)>, /* SDMMC2_D7 */
					 <STM32_PINMUX('F', 0, AF10)>, /* SDMMC2_D4 */
					 <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('E', 3, AF10)>; /* SDMMC2_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
	};

	sdmmc2_opendrain_pins_mx: sdmmc2_opendrain_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('B', 3, AF10)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('B', 4, AF10)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('B', 9, AF10)>, /* SDMMC2_D5 */
					 <STM32_PINMUX('B', 14, AF10)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('B', 15, AF10)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('C', 6, AF10)>, /* SDMMC2_D6 */
					 <STM32_PINMUX('C', 7, AF10)>, /* SDMMC2_D7 */
					 <STM32_PINMUX('F', 0, AF10)>; /* SDMMC2_D4 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('E', 3, AF10)>; /* SDMMC2_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
			bias-disable;
			drive-open-drain;
			slew-rate = <1>;
		};
	};

	sdmmc2_sleep_pins_mx: sdmmc2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 3, ANALOG)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('B', 4, ANALOG)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('B', 9, ANALOG)>, /* SDMMC2_D5 */
					 <STM32_PINMUX('B', 14, ANALOG)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('B', 15, ANALOG)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('C', 6, ANALOG)>, /* SDMMC2_D6 */
					 <STM32_PINMUX('C', 7, ANALOG)>, /* SDMMC2_D7 */
					 <STM32_PINMUX('E', 3, ANALOG)>, /* SDMMC2_CK */
					 <STM32_PINMUX('F', 0, ANALOG)>, /* SDMMC2_D4 */
					 <STM32_PINMUX('G', 6, ANALOG)>; /* SDMMC2_CMD */
		};
	};

	spi1_pins_mx: spi1_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 3, AF5)>, /* SPI1_MOSI */
					 <STM32_PINMUX('A', 6, AF5)>, /* SPI1_MISO */
					 <STM32_PINMUX('B', 1, AF5)>; /* SPI1_SCK */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	spi1_sleep_pins_mx: spi1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 3, ANALOG)>, /* SPI1_MOSI */
					 <STM32_PINMUX('A', 6, ANALOG)>, /* SPI1_MISO */
					 <STM32_PINMUX('B', 1, ANALOG)>; /* SPI1_SCK */
		};
	};

	spi2_pins_mx: spi2_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 8, AF8)>, /* SPI2_MOSI */
					 <STM32_PINMUX('B', 5, AF5)>, /* SPI2_MISO */
					 <STM32_PINMUX('B', 10, AF6)>; /* SPI2_SCK */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	spi2_sleep_pins_mx: spi2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 8, ANALOG)>, /* SPI2_MOSI */
					 <STM32_PINMUX('B', 5, ANALOG)>, /* SPI2_MISO */
					 <STM32_PINMUX('B', 10, ANALOG)>; /* SPI2_SCK */
		};
	};

	spi3_pins_mx: spi3_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('F', 1, AF5)>, /* SPI3_MOSI */
					 <STM32_PINMUX('G', 7, AF5)>, /* SPI3_MISO */
					 <STM32_PINMUX('H', 13, AF6)>; /* SPI3_SCK */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	spi3_sleep_pins_mx: spi3_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('F', 1, ANALOG)>, /* SPI3_MOSI */
					 <STM32_PINMUX('G', 7, ANALOG)>, /* SPI3_MISO */
					 <STM32_PINMUX('H', 13, ANALOG)>; /* SPI3_SCK */
		};
	};

	spi4_pins_mx: spi4_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('E', 11, AF5)>, /* SPI4_MOSI */
					 <STM32_PINMUX('E', 12, AF5)>, /* SPI4_SCK */
					 <STM32_PINMUX('F', 3, AF5)>; /* SPI4_MISO */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	spi4_sleep_pins_mx: spi4_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('E', 11, ANALOG)>, /* SPI4_MOSI */
					 <STM32_PINMUX('E', 12, ANALOG)>, /* SPI4_SCK */
					 <STM32_PINMUX('F', 3, ANALOG)>; /* SPI4_MISO */
		};
	};

	uart4_pins_mx: uart4_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('D', 6, AF8)>; /* UART4_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('D', 8, AF8)>; /* UART4_RX */
			bias-disable;
		};
	};

	uart4_sleep_pins_mx: uart4_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 6, ANALOG)>, /* UART4_TX */
					 <STM32_PINMUX('D', 8, ANALOG)>; /* UART4_RX */
		};
	};

	uart5_pins_mx: uart5_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 0, AF8)>; /* UART5_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('F', 13, AF8)>; /* UART5_RX */
			bias-disable;
		};
	};

	uart5_sleep_pins_mx: uart5_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 0, ANALOG)>, /* UART5_TX */
					 <STM32_PINMUX('F', 13, ANALOG)>; /* UART5_RX */
		};
	};

	uart7_pins_mx: uart7_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('E', 10, AF7)>; /* UART7_RX */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('E', 8, AF7)>; /* UART7_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	uart7_sleep_pins_mx: uart7_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('E', 8, ANALOG)>, /* UART7_TX */
					 <STM32_PINMUX('E', 10, ANALOG)>; /* UART7_RX */
		};
	};

	usart1_pins_mx: usart1_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 7, AF7)>, /* USART1_CTS */
					 <STM32_PINMUX('B', 0, AF4)>; /* USART1_RX */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('A', 9, AF7)>, /* USART1_TX */
					 <STM32_PINMUX('C', 2, AF7)>; /* USART1_RTS */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	usart1_sleep_pins_mx: usart1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 7, ANALOG)>, /* USART1_CTS */
					 <STM32_PINMUX('A', 9, ANALOG)>, /* USART1_TX */
					 <STM32_PINMUX('B', 0, ANALOG)>, /* USART1_RX */
					 <STM32_PINMUX('C', 2, ANALOG)>; /* USART1_RTS */
		};
	};

	usart6_pins_mx: usart6_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('F', 8, AF7)>; /* USART6_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('G', 9, AF7)>; /* USART6_RX */
			bias-disable;
		};
	};

	usart6_sleep_pins_mx: usart6_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('F', 8, ANALOG)>, /* USART6_TX */
					 <STM32_PINMUX('G', 9, ANALOG)>; /* USART6_RX */
		};
	};

	/* USER CODE BEGIN pinctrl */
	/* USER CODE END pinctrl */
};

&adc_1{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&adc1_pins_mx>;
	pinctrl-1 = <&adc1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN adc_1 */
	/* USER CODE END adc_1 */
};

&bsec{
	status = "okay";

	/* USER CODE BEGIN bsec */
	/* USER CODE END bsec */
};

&dma1{
	status = "okay";

	/* USER CODE BEGIN dma1 */
	sram = <&dma_pool>;
	/* USER CODE END dma1 */
};

&dma2{
	status = "okay";

	/* USER CODE BEGIN dma2 */
	sram = <&dma_pool>;
	/* USER CODE END dma2 */
};

&dmamux1{
	status = "okay";

	dma-masters = <&dma1 &dma2>;
	dma-channels = <16>;

	/* USER CODE BEGIN dmamux1 */
	/* USER CODE END dmamux1 */
};

&eth1{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&eth1_pins_mx>;
	pinctrl-1 = <&eth1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN eth1 */
	phy-mode = "rmii";
	max-speed = <100>;
	phy-handle = <&phy0_eth1>;
	st,eth-ref-clk-sel;
	phy-supply = <&scmi_v3v3_sw>;
	nvmem-cells = <&ethernet_mac1_address>;
	nvmem-cell-names = "mac-address";

	mdio0 {
		#address-cells = <1>;
		#size-cells = <0>;
		compatible = "snps,dwmac-mdio";
		phy0_eth1: ethernet-phy@0 {
			reg = <1>;
			compatible = "ethernet-phy-id0022.1510";
			reset-gpios = <&gpioi 3 GPIO_ACTIVE_LOW>;
			interrupt-parent = <&gpioh>;
			interrupts = <6 IRQ_TYPE_EDGE_FALLING>; /* ETH_MDINT# */
			reset-delay-us = <10000>;
			post-reset-delay-us = <1000>;
		};
	};
	/* USER CODE END eth1 */
};

&eth2{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&eth2_pins_mx>;
	pinctrl-1 = <&eth2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN eth2 */
	phy-mode = "rmii";
	max-speed = <100>;
	phy-handle = <&phy0_eth2>;
	st,eth-ref-clk-sel;
	phy-supply = <&scmi_v3v3_sw>;
	nvmem-cells = <&ethernet_mac2_address>;
	nvmem-cell-names = "mac-address";

	mdio0 {
		#address-cells = <1>;
		#size-cells = <0>;
		compatible = "snps,dwmac-mdio";
		phy0_eth2: ethernet-phy@0 {
			reg = <1>;
			compatible = "ethernet-phy-id0022.1510";
			reset-gpios = <&gpioi 2 GPIO_ACTIVE_LOW>;
			interrupt-parent = <&gpiog>;
			interrupts = <12 IRQ_TYPE_EDGE_FALLING>; /* ETH_MDINT# */
			reset-delay-us = <10000>;
			post-reset-delay-us = <1000>;
		};
	};
	/* USER CODE END eth2 */
};

&i2c1{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c1_pins_mx>;
	pinctrl-1 = <&i2c1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN i2c1 */
	/* USER CODE END i2c1 */
};

&i2c2{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c2_pins_mx>;
	pinctrl-1 = <&i2c2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN i2c2 */
	/* USER CODE END i2c2 */
};

&i2c3{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c3_pins_mx>;
	pinctrl-1 = <&i2c3_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN i2c3 */
	/* USER CODE END i2c3 */
};

&ltdc{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&ltdc_pins_mx>;
	pinctrl-1 = <&ltdc_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN ltdc */
	port {
		#address-cells = <1>;
		#size-cells = <0>;

		ltdc_out_rgb: endpoint@0 {
			reg = <0>;
			remote-endpoint = <&panel_in_rgb>;
		};
	};
	/* USER CODE END ltdc */
};

&m_can1{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&fdcan1_pins_mx>;
	pinctrl-1 = <&fdcan1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m_can1 */
	/* USER CODE END m_can1 */
};

&m_can2{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&fdcan2_pins_mx>;
	pinctrl-1 = <&fdcan2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m_can2 */
	/* USER CODE END m_can2 */
};

&mdma{
	status = "okay";

	/* USER CODE BEGIN mdma */
	/* USER CODE END mdma */
};

&qspi{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&quadspi_pins_mx>;
	pinctrl-1 = <&quadspi_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN qspi */
	/* USER CODE END qspi */
};

&rcc{
	status = "okay";

	/* USER CODE BEGIN rcc */
	/* USER CODE END rcc */
};

&rtc{
	status = "okay";

	/* USER CODE BEGIN rtc */
	/* USER CODE END rtc */
};

&sdmmc1{
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc1_pins_mx>;
	pinctrl-1 = <&sdmmc1_opendrain_pins_mx>;
	pinctrl-2 = <&sdmmc1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN sdmmc1 */
	disable-wp;
	st,neg-edge;
	bus-width = <4>;
	vmmc-supply = <&vmmc>;
	/* USER CODE END sdmmc1 */
};

&sdmmc2{
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc2_pins_mx>;
	pinctrl-1 = <&sdmmc2_opendrain_pins_mx>;
	pinctrl-2 = <&sdmmc2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN sdmmc2 */
	non-removable;
	no-sd;
	no-sdio;
	st,neg-edge;
	bus-width = <8>;
	vmmc-supply = <&vmmc>;
	vqmmc-supply = <&vmmc>;
	mmc-ddr-3_3v;
	/* USER CODE END sdmmc2 */
};

&spi1{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi1_pins_mx>;
	pinctrl-1 = <&spi1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN spi1 */
	/* USER CODE END spi1 */
};

&spi2{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi2_pins_mx>;
	pinctrl-1 = <&spi2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN spi2 */
	/* USER CODE END spi2 */
};

&spi3{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi3_pins_mx>;
	pinctrl-1 = <&spi3_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN spi3 */
	/* USER CODE END spi3 */
};

&spi4{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi4_pins_mx>;
	pinctrl-1 = <&spi4_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN spi4 */
	/* USER CODE END spi4 */
};

&uart4{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart4_pins_mx>;
	pinctrl-1 = <&uart4_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN uart4 */
	/* USER CODE END uart4 */
};

&uart5{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart5_pins_mx>;
	pinctrl-1 = <&uart5_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN uart5 */
	/* USER CODE END uart5 */
};

&uart7{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart7_pins_mx>;
	pinctrl-1 = <&uart7_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN uart7 */
	/* USER CODE END uart7 */
};

&usart1{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&usart1_pins_mx>;
	pinctrl-1 = <&usart1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN usart1 */
	/* USER CODE END usart1 */
};

&usart6{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&usart6_pins_mx>;
	pinctrl-1 = <&usart6_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN usart6 */
	/* USER CODE END usart6 */
};

&usbh_ehci{
	status = "okay";

	/* USER CODE BEGIN usbh_ehci */
	phys = <&usbphyc_port0>;
	phy-names = "usb";
	/* USER CODE END usbh_ehci */
};

&usbh_ohci{
	status = "okay";

	/* USER CODE BEGIN usbh_ohci */
	phys = <&usbphyc_port0>;
	phy-names = "usb";
	/* USER CODE END usbh_ohci */
};

&usbotg_hs{
	status = "okay";

	/* USER CODE BEGIN usbotg_hs */
	phys = <&usbphyc_port1 0>;
	phy-names = "usb2-phy";
 	u-boot,force-b-session-valid;
 	dr_mode = "peripheral";
	/* USER CODE END usbotg_hs */
};

&usbphyc{
	status = "okay";

	/* USER CODE BEGIN usbphyc */
	/* USER CODE END usbphyc */
};

&usbphyc_port0{
	status = "okay";

	/* USER CODE BEGIN usbphyc_port0 */
	phy-supply = <&scmi_vdd_usb>;
	st,phy-tuning = <&usb_phy_tuning>;
	/* USER CODE END usbphyc_port0 */
};

&usbphyc_port1{
	status = "okay";

	/* USER CODE BEGIN usbphyc_port1 */
	phy-supply = <&scmi_vdd_usb>;
	st,phy-tuning = <&usb_phy_tuning>;
	/* USER CODE END usbphyc_port1 */
};

/* USER CODE BEGIN addons */
&scmi_regu {
	scmi_vddcpu: voltd-vddcpu {
		voltd-name = "vddcpu";
		regulator-name = "vddcpu";
	};
	scmi_vdd: voltd-vdd {
		voltd-name = "vdd";
		regulator-name = "vdd";
	};
	scmi_vddcore: voltd-vddcore {
		voltd-name = "vddcore";
		regulator-name = "vddcore";
	};
	scmi_vdd_adc: voltd-vdd_adc {
		voltd-name = "vdd_adc";
		regulator-name = "vdd_adc";
	};
	scmi_vdd_usb: voltd-vdd_usb {
		voltd-name = "vdd_usb";
		regulator-name = "vdd_usb";
	};
	scmi_vdd_sd: voltd-vdd_sd {
		voltd-name = "vdd_sd";
		regulator-name = "vdd_sd";
	};
	scmi_v1v8_periph: voltd-v1v8_periph {
		voltd-name = "v1v8_periph";
		regulator-name = "v1v8_periph";
	};
	scmi_v3v3_sw: voltd-v3v3_sw {
		voltd-name = "v3v3_sw";
		regulator-name = "v3v3_sw";
	};
};

&sram {
	dma_pool: dma-sram@0 {
		reg = <0x0 0x4000>;
		pool;
	};
};
/* USER CODE END addons */

